import tkinter as tk
from tkinter import messagebox
import random

class TicTacToeGUI:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Крестики-нолики")
        self.window.resizable(False, False)

        # Настройки игры
        self.board = [' ' for _ in range(9)]
        self.player_symbol = 'X'
        self.bot_symbol = 'O'
        self.current_player = self.player_symbol
        self.game_active = True

        # Создание canvas
        self.canvas = tk.Canvas(self.window, width=300, height=350, bg='white')
        self.canvas.pack()

        # Кнопка новой игры
        self.new_game_btn = tk.Button(self.window, text="Новая игра",
                                     command=self.new_game, font=('Arial', 12))
        self.new_game_btn.pack(pady=5)

        # Рисуем начальное поле
        self.draw_board()

        # Привязываем обработчик кликов
        self.canvas.bind("<Button-1>", self.click_handler)

    def draw_board(self):
        """Рисует игровое поле"""
        self.canvas.delete("all")

        # Рисуем сетку
        for i in range(1, 3):
            # Вертикальные линии
            self.canvas.create_line(i * 100, 0, i * 100, 300, width=2)
            # Горизонтальные линии
            self.canvas.create_line(0, i * 100, 300, i * 100, width=2)

        # Рисуем крестики и нолики
        for i in range(9):
            row = i // 3
            col = i % 3
            x = col * 100 + 50
            y = row * 100 + 50

            if self.board[i] == 'X':
                self.draw_x(x, y)
            elif self.board[i] == 'O':
                self.draw_o(x, y)

        # Отображаем текущего игрока
        status_text = f"Сейчас ходит: {self.current_player}"
        self.canvas.create_text(150, 325, text=status_text, font=('Arial', 14))

    def draw_x(self, x, y):
        """Рисует крестик"""
        size = 30
        self.canvas.create_line(x-size, y-size, x+size, y+size,
                               width=3, fill='blue')
        self.canvas.create_line(x+size, y-size, x-size, y+size,
                               width=3, fill='blue')

    def draw_o(self, x, y):
        """Рисует нолик"""
        size = 30
        self.canvas.create_oval(x-size, y-size, x+size, y+size,
                               width=3, outline='red')

    def click_handler(self, event):
        """Обрабатывает клики игрока"""
        if not self.game_active or self.current_player != self.player_symbol:
            return

        # Определяем клетку по координатам
        col = event.x // 100
        row = event.y // 100

        if row < 3 and col < 3:  # Проверяем, что клик в пределах поля
            position = row * 3 + col

            if self.board[position] == ' ':  # Если клетка свободна
                self.make_move(position, self.player_symbol)

                if self.game_active:
                    self.current_player = self.bot_symbol
                    self.window.after(500, self.bot_move)  # Бот ходит через 0.5 сек

    def make_move(self, position, player):
        """Совершает ход"""
        self.board[position] = player
        self.draw_board()

        winner = self.check_winner()
        if winner:
            self.game_active = False
            if winner == 'Tie':
                messagebox.showinfo("Игра окончена", "Ничья!")
            else:
                winner_name = "Вы" if winner == self.player_symbol else "Бот"
                messagebox.showinfo("Игра окончена", f"{winner_name} победили!")

    def bot_move(self):
        """Ход бота"""
        if not self.game_active or self.current_player != self.bot_symbol:
            return

        move = self.get_best_move()
        if move is not None:
            self.make_move(move, self.bot_symbol)
            if self.game_active:
                self.current_player = self.player_symbol

    def get_best_move(self):
        """Находит лучший ход для бота с помощью минимакса"""
        available_moves = [i for i, spot in enumerate(self.board) if spot == ' ']

        if not available_moves:
            return None

        # Если поле пустое, выбираем случайный угол
        if len(available_moves) == 9:
            return random.choice([0, 2, 6, 8])

        # Пробуем выиграть следующим ходом
        for move in available_moves:
            self.board[move] = self.bot_symbol
            if self.check_winner() == self.bot_symbol:
                self.board[move] = ' '
                return move
            self.board[move] = ' '

        # Блокируем выигрышные ходы игрока
        for move in available_moves:
            self.board[move] = self.player_symbol
            if self.check_winner() == self.player_symbol:
                self.board[move] = ' '
                return move
            self.board[move] = ' '

        # Стратегические позиции
        # Центр
        if 4 in available_moves:
            return 4

        # Углы
        corners = [0, 2, 6, 8]
        available_corners = [c for c in corners if c in available_moves]
        if available_corners:
            return random.choice(available_corners)

        # Стороны
        sides = [1, 3, 5, 7]
        available_sides = [s for s in sides if s in available_moves]
        if available_sides:
            return random.choice(available_sides)

        return random.choice(available_moves)

    def check_winner(self):
        """Проверяет победителя"""
        # Проверка строк
        for i in range(0, 9, 3):
            if self.board[i] == self.board[i+1] == self.board[i+2] != ' ':
                return self.board[i]

        # Проверка столбцов
        for i in range(3):
            if self.board[i] == self.board[i+3] == self.board[i+6] != ' ':
                return self.board[i]

        # Проверка диагоналей
        if self.board[0] == self.board[4] == self.board[8] != ' ':
            return self.board[0]
        if self.board[2] == self.board[4] == self.board[6] != ' ':
            return self.board[2]

        # Проверка на ничью
        if ' ' not in self.board:
            return 'Tie'

        return None

    def new_game(self):
        """Начинает новую игру"""
        self.board = [' ' for _ in range(9)]
        self.current_player = self.player_symbol
        self.game_active = True
        self.draw_board()

    def run(self):
        """Запускает игру"""
        self.window.mainloop()

# Запуск игры
if __name__ == "__main__":
    game = TicTacToeGUI()
    game.run()
